|| HMAC.scurl
|| maintained by: sadman
||
|| Implementation of  keyed-hash message authentication code (HMAC) derived from FIPS PUB 198
||
|| Classes:
||  BaseHMAC
||  HMAC-MD5
||  HMAC-SHA-1
||  HMAC-SHA-224
||  HMAC-SHA-256
||  HMAC-SHA-384
||  HMAC-SHA-512
||
|| Distributed under the New BSD License:
|#
  Copyright (c) 2006, Steve Adams
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted 
  provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions 
      and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
      and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products 
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#|
{curl-file-attributes character-encoding = "utf8"}

{doc-next 
    {purpose Implementation of the Keyed-Hash Message Authentication Code (HMAC)
        described in FIPS PUB 198.
    }
}
{define-class abstract public BaseHMAC
  
  field private ipad:ByteVec
  field private opad:ByteVec
  field protected key-size:int
  field protected hash-size:int
  field protected block-size:int
  
  {constructor public {default block-size:int, hash-size:int}
    set self.block-size = block-size
    set self.hash-size = hash-size
    set self.ipad =
        {ByteVec.from-size block-size, 0x36}
    set self.opad =
        {ByteVec.from-size block-size, 0x5c}
    
  }

  || Return the key representation to be used
  {method protected {key-fixup in-key:ByteVec}:ByteVec
    || step 1 - if the number of bytes in the key match the number
    || of bocks used by the hashing function, then use the key.
    {if in-key.size == self.block-size then {return in-key}}
    
    || step 2. If the key has more bytes than the block size, 
    || then use a hash of the key.
    {if in-key.size > self.block-size then
        let new-key:ByteVec =
            {ByteVec.from-size self.block-size , 0}
        
        let bv:ByteVec = {self.hash in-key}
        
        {for b key i in bv do
            set new-key[i] = b
        }
        
        {return new-key}
    }
    
    || step 3 If the key has less bytes than the block size, then
    || pad the key with zeroes.
    let new-key:ByteVec =
        {ByteVec.from-size self.block-size , 0}
    
    {for b key i in in-key do
        set new-key[i] = b
    }
    {return new-key}
  }
  
  {doc-next {purpose Return the HMAC digest as a string.}}
  {method public {digest-from-string 
                     key:String, 
                     text:String, 
                     truncate:int = -1,  || automatically set to the number of bytes
                     character-encoding:CharEncoding = CharEncoding.utf8
                 }:ByteVec
    
    let key-bv:ByteVec = {ByteVec.from-size key.size , 0}
    {encode-characters  key, key-bv, character-encoding, out-start=0}
    
    let text-bv:ByteVec = {ByteVec.from-size text.size , 0}
    {encode-characters  text, text-bv, character-encoding, out-start=0}
    
    let digest-bv:ByteVec =
        {self.digest-from-ByteVec key-bv, text-bv, truncate = {if truncate == -1 then key-bv.size else truncate}}
    
    {return digest-bv}
  }
  
  {doc-next {purpose Return the HMAC digest as a ByteVec.}}
  {method public {digest-from-ByteVec key:ByteVec, text:ByteVec, truncate:int = key.size}:ByteVec
    || steps 1 - 3
    let mac-key:ByteVec = {self.key-fixup key}
    || step 4
    let ki-pad:ByteVec =
        {self.byte-xor mac-key, self.ipad, mac-key.size}
    
    || step 5
    let inner:ByteVec =
        {ByteVec {splice ki-pad}, {splice text}}
    
    || step 6
    let hash-inner:ByteVec = {self.hash inner}
    
    || step 7
    let ko-pad:ByteVec =
        {self.byte-xor mac-key, self.opad, mac-key.size}
    
    || step 8
    let outer:ByteVec =
        {ByteVec {splice ko-pad}, {splice hash-inner}}
    
    || step 9
    let hash-outer:ByteVec = {self.hash outer}
    
    || truncate if necessary
    {if hash-outer.size > truncate then
        {hash-outer.remove truncate, length = hash-outer.size - truncate}
    }
    
    {return hash-outer}
  }
  
  {method protected {byte-xor b1:ByteVec, b2:ByteVec, count:int}:ByteVec
    let bxor:ByteVec = {ByteVec.from-size count, 0}
    {for i = 0 below count do
        set bxor[i] = {bit-xor b1[i], b2[i]} asa byte
    }
    {return bxor}
  }
  
  {doc-next {purpose Returns a hash for a ByteVec.}}
  {method abstract protected {hash bv:ByteVec}:ByteVec}
  
} || BaseHMAC



{define-class public HMAC-MD5 {inherits BaseHMAC}
  
  field private digester:sadMD5-Digester = {sadMD5-Digester}
  field public-get private-set digest:#sadMD5-Digest
  
  {constructor public {default}
    {construct-super 64, 16}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
}

{define-class public HMAC-SHA-1 {inherits BaseHMAC}
  
  field private digester:sadSHA-1-Digester = {sadSHA-1-Digester}
  field public-get private-set digest:#sadSHA-1-Digest
  
  {constructor public {default}
    {construct-super 64, 20}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
} || class HMAC-SHA-1

{define-class public HMAC-SHA-224 {inherits BaseHMAC}
  
  field private digester:sadSHA-224-Digester = {sadSHA-224-Digester}
  field public-get private-set digest:#sadSHA-224-Digest
  
  {constructor public {default}
    {construct-super 64, 32}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
} || class HMAC-SHA-224

{define-class public HMAC-SHA-256 {inherits BaseHMAC}
  
  field private digester:sadSHA-256-Digester = {sadSHA-256-Digester}
  field public-get private-set digest:#sadSHA-256-Digest
  
  {constructor public {default}
    {construct-super 64, 32}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
} || class HMAC-SHA-256

{define-class public HMAC-SHA-384 {inherits BaseHMAC}
  
  field private digester:sadSHA-384-Digester = {sadSHA-384-Digester}
  field public-get private-set digest:#sadSHA-384-Digest
  
  {constructor public {default}
    {construct-super 128, 48}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
} || class HMAC-SHA-384

{define-class public HMAC-SHA-512 {inherits BaseHMAC}
  
  field private digester:sadSHA-512-Digester = {sadSHA-512-Digester}
  field public-get private-set digest:#sadSHA-512-Digest
  
  {constructor public {default}
    {construct-super 128, 64}
  }
  
  {method protected {hash bv:ByteVec}:ByteVec
    
    set self.digest =
        {self.digester.digest-from-byte-stream
            {new {InputStream-of-from byte, ByteVec}, bv}
        }
    
    let obv:ByteVec = {ByteVec-from-hex-string {{String self.digest}.to-lower-clone}}
    
    {return obv}
  }
  
} || class HMAC-SHA-512