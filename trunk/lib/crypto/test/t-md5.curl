|| t-md5.curl
|| maintained by: sadman
||
|| Very basic tests for the MD5 hash function

||
|| Distributed under the New BSD License:
|#
  Copyright (c) 2006, Steve Adams
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted 
  provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions 
      and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
      and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products 
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#|
{curl 5.0 applet}
{curl-file-attributes character-encoding = "utf8"}
{applet 
    {compiler-directives
        careful? = true
    }    
}

{import * from COM.CURLR.CRYPTO,
    location = "../load.scurl"
}

|| These are the test strings and their digests
{let test-vectors:StringStringTable =
    {StringStringTable
        "", "d41d8cd98f00b204e9800998ecf8427e",
        "a", "0cc175b9c0f1b6a831c399e269772661",
        "abc", "900150983cd24fb0d6963f7d28e17f72",
        "message digest", "f96b697d7cb7938d525a2f31aaf161d0",
        "abcdefghijklmnopqrstuvwxyz", "c3fcd3d76192e4007dfb496cca67e13b",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", "d174ab98d277d9f5a5611c2c9f419d9f",
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890", "57edf4a22be3c955ac49da2e2107b67a"
    }
}
        
{value
    || a display box
    let results:VBox = {VBox}
    
    || create a MD5 digester to create the digests
    let md5-digester:sadMD5-Digester = {sadMD5-Digester}
    
    {for expected:String key test-string:String in test-vectors do
        || create a digest for the string
        let digest:sadMD5-Digest = {md5-digester.digest-from-string test-string}
        

        || create a clone of the digest string
        let result:String = {digest.to-lower-String}

        || compare the result
        let pass?:bool = result == expected

        {results.add
            {VBox
                {format "string: %w", test-string},
                {format "expected: %w",expected},
                {format "result: %w", result},
                {if pass? then {text color = "green", PASS}
                 else {bold color = "red", FAILED}
                },
                {hrule}
            }
        }
    }
    
    results
}
