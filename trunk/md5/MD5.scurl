||| Maintained by: cbarber



{define-class public final MD5-Digest {inherits {MsgDigest-of-len 4}}

  {constructor public {default str:StringInterface}
    {construct-super.from-string str}
  }

  {constructor package {from-bytes bytes:ByteVec}
    let buf:StringBuf = {StringBuf}
    {for b in bytes do
        {format out = buf, "%.2x", b}
    }
    {construct-super.from-string buf}
  }

  {method public {clone}:MD5-Digest
    {return {MD5-Digest {String self}}}
  }
}

{define-class public abstract sealed MD5-Digester
  {inherits {MsgDigester-for MD5-Digest}}
 
  field private constant _buffer:ByteVec

  {constructor package {default
                           char-encoding:CharEncoding = CharEncoding.utf8,
                           buffer-size:int = 64
                       }
    {construct-super char-encoding = char-encoding}
    set self._buffer = {ByteVec max-size = buffer-size}
  }

  {factory public {default
                      char-encoding:CharEncoding = CharEncoding.utf8,
                      buffer-size:int = 64
                  }:MD5-Digester
    {return
        {MD5-DigesterImpl 
            char-encoding = char-encoding,
            buffer-size = buffer-size
        }
    }
  }

  {method public sealed {start}:void
    {self._buffer.clear}
  }

  {method public final {add-byte b:byte}:void
    {self._buffer.append b}
    {if self._buffer.size == self._buffer.max-size then
        {self.add-bytes self._buffer}
        {self._buffer.clear}
    }
  }

  {method public final {finish}:MD5-Digest
    {if self._buffer.size > 0 then
        {self.add-bytes self._buffer}
    }
    {return {MD5-Digest.from-bytes {self.finish-bytes}}}
  }

  {method package abstract {add-bytes bytes:ByteVec}:void}

  {method package abstract {finish-bytes}:ByteVec}
}
