|| sadXMLNode.scurl
|| maintained by: sadman
||
|| Simple class for XML node, with basic search methods
|| Distributed under the New BSD License:
|#
  Copyright (c) 2006, Steve Adams
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted 
  provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions 
      and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
      and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products 
      derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED 
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#|
{define-class public final sadXMLAttr
  field public name:String
  field public value:String
  {constructor public {default name:String, value:String}
    set self.name = name
    set self.value = value
  }
  {getter public {local-name}:String
    {return self.name}
  }

}
|| Simple XML node
{define-class public sadXMLNode 
  || parent node
  field public parent:#sadXMLNode
  || child nodes
  field public children:#{Array-of sadXMLNode}
  || level in the hierarchy of this node
  field public depth:int
  || anme value pairs of attributes
  field public attrs:#Arguments
  || the text value of the node
  field public text:String
  || the local name of the node
  field public local-name:String
  
  {constructor public {default 
                          || the given name of the node
                          name:String, 
                          || optional depth in hierarchy
                          depth:int = 0,
                          || text value for the node
                          text:String = "", 
                          || attributes, if any
                          attrs:#Arguments = null, 
                          || children, if any
                          children:#{Array-of sadXMLNode} = null
                      }
    set self.children   = children
    set self.local-name = name
    set self.depth = depth
    set self.attrs = attrs
    set self.text  = text
  }
  
  || tree node functions
  
  || add a node (and its sub-tree) as a child
  {method public {append node:sadXMLNode}:void
    set node.parent = self
    set node.depth = self.depth + 1
    {if self.children == null then
        set self.children = {new {Array-of sadXMLNode}}
    }
    {self.children.append node}
  }
  
  || remove a child node - this also detaches the sub-tree below the node
  {method public {remove node:sadXMLNode}:void
    || find the node among the childen
    {if-non-null children = self.children then
        let index:int = {children.find node}
        {if index >= 0 then
            {children.remove index}
        }
        set node.parent = null
    }
  }
  
  || XML query functions
  
  || the text value of the node
  {method public {get-text}:String
    {return self.text}
  }
  
  || return the attribute value for a specified name, return the empty atring if
  || the attribute is not found
  {method public {get-attribute attr-name:String}:String
    {if-non-null attrs = self.attrs then
        
        let (val:any, found?:bool) = {self.attrs.get-keyword-argument-if-exists attr-name}
        
        {if found? then
            {return val asa String}
        }
    }
    {return ""}
  }
  
  || find child node with a name
  {method public {get-child node-name:String}:#sadXMLNode
    {if-non-null children = self.children then
        {for node in children do
            {if node.local-name == node-name then
                {return node}
            }
        }
    }
    {return null}
  }
  
  || find descendant nodes with a node name 
  || equivalent to aearching for  a tag - does not include self in the search
  {method public {search-children 
                     node-name:String, 
                     include-descendants?:bool = false
                 }:{Array-of sadXMLNode}
    
    let found:{Array-of sadXMLNode} = {new {Array-of sadXMLNode}}
    {if-non-null children = self.children then
        {for node in children do
            {if include-descendants? then
                {found.concat 
                    {node.search-children node-name, include-descendants? = include-descendants?}
                }
            }
            {if node.local-name == node-name then
                {found.append node}
            }
        }
    }
    {return found}    
  }
  
  || when the proc returns true, the walk is halted
  || proc tests on self first, then on children
  {method public {walk-nodes 
                     action-proc:{proc-type {node:sadXMLNode}:bool}
                 }:bool
    
    {if {action-proc self} then 
        {return true}
    }
    
    {if-non-null children = self.children then
        {for child in children do
            {if {child.walk-nodes action-proc} then {return true}}
        }
    }
    {return false}
  }
  
  let tag-template:String = "<TAGNAMEATTRIBUTES>"
  let end-tag-template:String = "</TAGNAME>"
  {method public {to-String}:String
    let sb:StringBuf = {StringBuf}
    {for i = 0 below self.depth do
        {sb.append ' '}
    }
    {sb.concat 
        {sadXMLNode.tag-template.replace-clone "TAGNAME", self.local-name}
    }
    || attributes
    {if-non-null attrs = self.attrs then
        let attr-buf:StringBuf = {StringBuf}
        {for (val, keyword) in attrs do
            {if-non-null keyword then
                {if-non-null val then
                    {attr-buf.concat {format " %s=%w", keyword asa String, val asa String}}
                }
            }
        }
        {sb.replace "ATTRIBUTES", attr-buf}
     else
        {sb.replace "ATTRIBUTES", ""}
    }
    || add the text, if any
    {sb.concat "\n"}
    {sb.concat self.text}
    
    || add the children
    {if-non-null children = self.children then
        {for child in children do
            {sb.concat "\n"}
            {sb.concat {child.to-String}}
        }
    }
    || end tag
    {sb.concat 
        {sadXMLNode.end-tag-template.replace-clone "TAGNAME", self.local-name}
    }
    
    {return {sb.to-String}}
  }
  
} || class sadXMLNode


